import { useState, memo } from 'react';\nimport { motion } from 'framer-motion';\nimport { toast } from 'react-toastify';\nimport { useMCPStore } from '~/lib/stores/mcp';\nimport { classNames } from '~/utils/classNames';\nimport { IconButton } from '~/components/ui/IconButton';\n\ninterface TestResult {\n  id: string;\n  timestamp: string;\n  toolName: string;\n  command: string;\n  status: 'success' | 'error' | 'running';\n  output?: string;\n  error?: string;\n  duration?: number;\n}\n\ninterface MCPTestConsoleProps {\n  className?: string;\n}\n\nexport const MCPTestConsole = memo(({ className }: MCPTestConsoleProps) => {\n  const communityTools = useMCPStore((state) => state.communityTools);\n  const serverTools = useMCPStore((state) => state.serverTools);\n  \n  const [testResults, setTestResults] = useState<TestResult[]>([]);\n  const [isRunningTests, setIsRunningTests] = useState(false);\n  const [selectedTool, setSelectedTool] = useState<string>('all');\n\n  const enabledTools = Object.entries(communityTools).filter(([_, tool]) => tool.enabled);\n\n  const runBasicTests = async () => {\n    setIsRunningTests(true);\n    const startTime = Date.now();\n    \n    try {\n      // Test 1: Check server availability\n      const availabilityTest: TestResult = {\n        id: `test-${Date.now()}-availability`,\n        timestamp: new Date().toISOString(),\n        toolName: 'System',\n        command: 'Server Availability Check',\n        status: 'running'\n      };\n      \n      setTestResults(prev => [availabilityTest, ...prev]);\n      \n      try {\n        const response = await fetch('/api/mcp-check');\n        const duration = Date.now() - startTime;\n        \n        if (response.ok) {\n          setTestResults(prev => prev.map(test => \n            test.id === availabilityTest.id \n              ? { ...test, status: 'success' as const, duration, output: 'All configured servers checked successfully' }\n              : test\n          ));\n        } else {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        setTestResults(prev => prev.map(test => \n          test.id === availabilityTest.id \n            ? { ...test, status: 'error' as const, duration, error: error instanceof Error ? error.message : String(error) }\n            : test\n        ));\n      }\n      \n      // Test 2: Configuration validation\n      const configTest: TestResult = {\n        id: `test-${Date.now()}-config`,\n        timestamp: new Date().toISOString(),\n        toolName: 'System',\n        command: 'Configuration Validation',\n        status: 'running'\n      };\n      \n      setTestResults(prev => [configTest, ...prev]);\n      \n      try {\n        const enabledCount = enabledTools.length;\n        const availableCount = Object.keys(serverTools).length;\n        \n        const configOutput = `\n• Enabled tools: ${enabledCount}\n• Available servers: ${availableCount}\n• Configuration status: ${enabledCount > 0 ? 'Valid' : 'No tools enabled'}`;\n        \n        const duration = Date.now() - startTime;\n        setTestResults(prev => prev.map(test => \n          test.id === configTest.id \n            ? { ...test, status: 'success' as const, duration, output: configOutput }\n            : test\n        ));\n      } catch (error) {\n        const duration = Date.now() - startTime;\n        setTestResults(prev => prev.map(test => \n          test.id === configTest.id \n            ? { ...test, status: 'error' as const, duration, error: error instanceof Error ? error.message : String(error) }\n            : test\n        ));\n      }\n      \n      // Test 3: Tool-specific tests\n      for (const [toolName, tool] of enabledTools.slice(0, 3)) { // Limit to first 3 tools for performance\n        const toolTest: TestResult = {\n          id: `test-${Date.now()}-${toolName}`,\n          timestamp: new Date().toISOString(),\n          toolName,\n          command: `Test ${tool.command} ${tool.args.join(' ')}`,\n          status: 'running'\n        };\n        \n        setTestResults(prev => [toolTest, ...prev]);\n        \n        try {\n          // Simulate tool-specific test (in real implementation, this would test actual tool functionality)\n          await new Promise(resolve => setTimeout(resolve, 500 + Math.random() * 1000));\n          \n          const serverStatus = serverTools[toolName];\n          const duration = Date.now() - startTime;\n          \n          if (serverStatus?.status === 'available') {\n            setTestResults(prev => prev.map(test => \n              test.id === toolTest.id \n                ? { ...test, status: 'success' as const, duration, output: `Tool is available and ready to use` }\n                : test\n            ));\n          } else {\n            throw new Error(serverStatus?.error || 'Tool not available');\n          }\n        } catch (error) {\n          const duration = Date.now() - startTime;\n          setTestResults(prev => prev.map(test => \n            test.id === toolTest.id \n              ? { ...test, status: 'error' as const, duration, error: error instanceof Error ? error.message : String(error) }\n              : test\n          ));\n        }\n      }\n      \n      toast.success('MCP integration tests completed');\n      \n    } catch (error) {\n      console.error('Error running tests:', error);\n      toast.error('Failed to run integration tests');\n    } finally {\n      setIsRunningTests(false);\n    }\n  };\n\n  const clearResults = () => {\n    setTestResults([]);\n  };\n\n  const filteredResults = selectedTool === 'all' \n    ? testResults \n    : testResults.filter(result => result.toolName === selectedTool);\n\n  const getStatusIcon = (status: TestResult['status']) => {\n    switch (status) {\n      case 'success':\n        return 'i-ph:check-circle-fill';\n      case 'error':\n        return 'i-ph:x-circle-fill';\n      case 'running':\n        return 'i-svg-spinners:90-ring-with-bg';\n    }\n  };\n\n  const getStatusColor = (status: TestResult['status']) => {\n    switch (status) {\n      case 'success':\n        return 'text-green-500';\n      case 'error':\n        return 'text-red-500';\n      case 'running':\n        return 'text-blue-500';\n    }\n  };\n\n  return (\n    <div className={classNames('mcp-test-console', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-bolt-elements-textPrimary\">\n            MCP Integration Test Console\n          </h3>\n          <p className=\"text-sm text-bolt-elements-textSecondary mt-1\">\n            Test the integration and functionality of your enabled MCP tools\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          <select\n            value={selectedTool}\n            onChange={(e) => setSelectedTool(e.target.value)}\n            className=\"px-3 py-2 text-sm bg-bolt-elements-background-depth-2 border border-bolt-elements-borderColor rounded text-bolt-elements-textPrimary\"\n          >\n            <option value=\"all\">All Tools</option>\n            <option value=\"System\">System Tests</option>\n            {enabledTools.map(([name, _]) => (\n              <option key={name} value={name}>{name}</option>\n            ))}\n          </select>\n          \n          <button\n            onClick={clearResults}\n            disabled={testResults.length === 0}\n            className=\"px-3 py-2 text-sm text-bolt-elements-textSecondary hover:text-bolt-elements-textPrimary border border-bolt-elements-borderColor rounded disabled:opacity-50\"\n          >\n            Clear\n          </button>\n          \n          <button\n            onClick={runBasicTests}\n            disabled={isRunningTests || enabledTools.length === 0}\n            className={classNames(\n              'px-4 py-2 rounded-lg text-sm flex items-center gap-2',\n              'bg-bolt-elements-item-backgroundAccent text-bolt-elements-item-contentAccent',\n              'hover:bg-bolt-elements-item-backgroundActive',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n            )}\n          >\n            {isRunningTests ? (\n              <>\n                <div className=\"i-svg-spinners:90-ring-with-bg w-4 h-4 animate-spin\" />\n                Running Tests...\n              </>\n            ) : (\n              <>\n                <div className=\"i-ph:play w-4 h-4\" />\n                Run Integration Tests\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Test Console */}\n      <div className=\"bg-gray-900 rounded-lg p-4 font-mono text-sm max-h-96 overflow-y-auto\">\n        {filteredResults.length === 0 ? (\n          <div className=\"text-gray-400 text-center py-8\">\n            {enabledTools.length === 0 \n              ? 'No enabled tools to test. Enable some community tools first.'\n              : 'No test results yet. Run integration tests to see results here.'}\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {filteredResults.map((result) => (\n              <motion.div\n                key={result.id}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"border-l-2 border-gray-600 pl-4\"\n              >\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className={classNames(\n                    getStatusIcon(result.status),\n                    'w-4 h-4',\n                    getStatusColor(result.status),\n                    result.status === 'running' && 'animate-spin'\n                  )} />\n                  \n                  <span className=\"text-gray-300\">\n                    [{new Date(result.timestamp).toLocaleTimeString()}]\n                  </span>\n                  \n                  <span className=\"text-yellow-400 font-medium\">\n                    {result.toolName}\n                  </span>\n                  \n                  <span className=\"text-gray-400\">\n                    {result.command}\n                  </span>\n                  \n                  {result.duration && (\n                    <span className=\"text-gray-500 text-xs\">\n                      ({result.duration}ms)\n                    </span>\n                  )}\n                </div>\n                \n                {result.output && (\n                  <div className=\"text-green-400 ml-7 whitespace-pre-line\">\n                    {result.output}\n                  </div>\n                )}\n                \n                {result.error && (\n                  <div className=\"text-red-400 ml-7\">\n                    Error: {result.error}\n                  </div>\n                )}\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      {/* Test Summary */}\n      {testResults.length > 0 && (\n        <div className=\"mt-4 p-4 bg-bolt-elements-background-depth-2 rounded-lg\">\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <div className=\"text-lg font-semibold text-green-500\">\n                {testResults.filter(r => r.status === 'success').length}\n              </div>\n              <div className=\"text-sm text-bolt-elements-textSecondary\">Passed</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-semibold text-red-500\">\n                {testResults.filter(r => r.status === 'error').length}\n              </div>\n              <div className=\"text-sm text-bolt-elements-textSecondary\">Failed</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-semibold text-blue-500\">\n                {testResults.filter(r => r.status === 'running').length}\n              </div>\n              <div className=\"text-sm text-bolt-elements-textSecondary\">Running</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nMCPTestConsole.displayName = 'MCPTestConsole';