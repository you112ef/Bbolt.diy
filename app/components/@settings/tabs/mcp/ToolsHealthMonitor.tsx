import { useState, useEffect, memo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useMCPStore } from '~/lib/stores/mcp';\nimport { classNames } from '~/utils/classNames';\nimport { IconButton } from '~/components/ui/IconButton';\n\ninterface ToolHealthStatus {\n  name: string;\n  status: 'healthy' | 'unhealthy' | 'unknown' | 'checking';\n  lastChecked?: string;\n  error?: string;\n  responseTime?: number;\n  version?: string;\n}\n\ninterface ToolsHealthMonitorProps {\n  className?: string;\n}\n\nexport const ToolsHealthMonitor = memo(({ className }: ToolsHealthMonitorProps) => {\n  const communityTools = useMCPStore((state) => state.communityTools);\n  const serverTools = useMCPStore((state) => state.serverTools);\n  const checkServersAvailabilities = useMCPStore((state) => state.checkServersAvailabilities);\n  \n  const [toolsHealth, setToolsHealth] = useState<Record<string, ToolHealthStatus>>({});\n  const [isCheckingAll, setIsCheckingAll] = useState(false);\n  const [lastGlobalCheck, setLastGlobalCheck] = useState<string | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const [refreshInterval, setRefreshInterval] = useState(30); // seconds\n\n  // Initialize tools health status\n  useEffect(() => {\n    const enabledTools = Object.entries(communityTools).filter(([_, tool]) => tool.enabled);\n    const initialHealth: Record<string, ToolHealthStatus> = {};\n    \n    enabledTools.forEach(([name, _]) => {\n      initialHealth[name] = {\n        name,\n        status: 'unknown'\n      };\n    });\n    \n    setToolsHealth(initialHealth);\n  }, [communityTools]);\n\n  // Update health status from server tools\n  useEffect(() => {\n    Object.entries(serverTools).forEach(([name, server]) => {\n      setToolsHealth(prev => ({\n        ...prev,\n        [name]: {\n          ...prev[name],\n          name,\n          status: server.status === 'available' ? 'healthy' : 'unhealthy',\n          error: server.status === 'unavailable' ? server.error : undefined,\n          lastChecked: new Date().toISOString()\n        }\n      }));\n    });\n  }, [serverTools]);\n\n  // Auto refresh functionality\n  useEffect(() => {\n    if (!autoRefresh) return;\n    \n    const interval = setInterval(() => {\n      checkAllTools();\n    }, refreshInterval * 1000);\n    \n    return () => clearInterval(interval);\n  }, [autoRefresh, refreshInterval]);\n\n  const checkAllTools = async () => {\n    setIsCheckingAll(true);\n    \n    // Mark all tools as checking\n    setToolsHealth(prev => {\n      const updated = { ...prev };\n      Object.keys(updated).forEach(name => {\n        updated[name] = {\n          ...updated[name],\n          status: 'checking'\n        };\n      });\n      return updated;\n    });\n    \n    try {\n      await checkServersAvailabilities();\n      setLastGlobalCheck(new Date().toISOString());\n    } catch (error) {\n      console.error('Error checking tools health:', error);\n    } finally {\n      setIsCheckingAll(false);\n    }\n  };\n\n  const checkSingleTool = async (toolName: string) => {\n    setToolsHealth(prev => ({\n      ...prev,\n      [toolName]: {\n        ...prev[toolName],\n        status: 'checking'\n      }\n    }));\n    \n    try {\n      // This would ideally check a single tool, but for now we check all\n      await checkServersAvailabilities();\n    } catch (error) {\n      setToolsHealth(prev => ({\n        ...prev,\n        [toolName]: {\n          ...prev[toolName],\n          status: 'unhealthy',\n          error: error instanceof Error ? error.message : String(error),\n          lastChecked: new Date().toISOString()\n        }\n      }));\n    }\n  };\n\n  const getStatusIcon = (status: ToolHealthStatus['status']) => {\n    switch (status) {\n      case 'healthy':\n        return 'i-ph:check-circle-fill';\n      case 'unhealthy':\n        return 'i-ph:x-circle-fill';\n      case 'checking':\n        return 'i-svg-spinners:90-ring-with-bg';\n      default:\n        return 'i-ph:question-fill';\n    }\n  };\n\n  const getStatusColor = (status: ToolHealthStatus['status']) => {\n    switch (status) {\n      case 'healthy':\n        return 'text-green-500';\n      case 'unhealthy':\n        return 'text-red-500';\n      case 'checking':\n        return 'text-blue-500';\n      default:\n        return 'text-gray-500';\n    }\n  };\n\n  const enabledToolsCount = Object.keys(toolsHealth).length;\n  const healthyCount = Object.values(toolsHealth).filter(tool => tool.status === 'healthy').length;\n  const unhealthyCount = Object.values(toolsHealth).filter(tool => tool.status === 'unhealthy').length;\n\n  return (\n    <div className={classNames('tools-health-monitor', className)}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-bolt-elements-textPrimary\">\n            Tools Health Monitor\n          </h3>\n          <p className=\"text-sm text-bolt-elements-textSecondary mt-1\">\n            {healthyCount} healthy • {unhealthyCount} unhealthy • {enabledToolsCount} total enabled\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          <label className=\"flex items-center gap-2 text-sm text-bolt-elements-textSecondary\">\n            <input\n              type=\"checkbox\"\n              checked={autoRefresh}\n              onChange={(e) => setAutoRefresh(e.target.checked)}\n              className=\"w-4 h-4 text-blue-600 bg-bolt-elements-background-depth-2 border-bolt-elements-borderColor rounded focus:ring-blue-500\"\n            />\n            Auto-refresh\n          </label>\n          \n          {autoRefresh && (\n            <select\n              value={refreshInterval}\n              onChange={(e) => setRefreshInterval(Number(e.target.value))}\n              className=\"px-2 py-1 text-sm bg-bolt-elements-background-depth-2 border border-bolt-elements-borderColor rounded text-bolt-elements-textPrimary\"\n            >\n              <option value={15}>15s</option>\n              <option value={30}>30s</option>\n              <option value={60}>1m</option>\n              <option value={300}>5m</option>\n            </select>\n          )}\n          \n          <button\n            onClick={checkAllTools}\n            disabled={isCheckingAll}\n            className={classNames(\n              'px-4 py-2 rounded-lg text-sm flex items-center gap-2',\n              'bg-bolt-elements-item-backgroundAccent text-bolt-elements-item-contentAccent',\n              'hover:bg-bolt-elements-item-backgroundActive',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n            )}\n          >\n            {isCheckingAll ? (\n              <>\n                <div className=\"i-svg-spinners:90-ring-with-bg w-4 h-4 animate-spin\" />\n                Checking...\n              </>\n            ) : (\n              <>\n                <div className=\"i-ph:arrow-counter-clockwise w-4 h-4\" />\n                Check All\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Health Status Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-green-500/10 border border-green-500/20 rounded-lg p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"i-ph:check-circle-fill w-6 h-6 text-green-500\" />\n            <div>\n              <div className=\"text-lg font-semibold text-green-500\">{healthyCount}</div>\n              <div className=\"text-sm text-bolt-elements-textSecondary\">Healthy Tools</div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"i-ph:x-circle-fill w-6 h-6 text-red-500\" />\n            <div>\n              <div className=\"text-lg font-semibold text-red-500\">{unhealthyCount}</div>\n              <div className=\"text-sm text-bolt-elements-textSecondary\">Unhealthy Tools</div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-bolt-elements-background-depth-2 border border-bolt-elements-borderColor rounded-lg p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"i-ph:clock w-6 h-6 text-bolt-elements-textSecondary\" />\n            <div>\n              <div className=\"text-lg font-semibold text-bolt-elements-textPrimary\">\n                {lastGlobalCheck ? new Date(lastGlobalCheck).toLocaleTimeString() : 'Never'}\n              </div>\n              <div className=\"text-sm text-bolt-elements-textSecondary\">Last Check</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tools List */}\n      <div className=\"space-y-3\">\n        <AnimatePresence>\n          {Object.values(toolsHealth).map((tool) => (\n            <motion.div\n              key={tool.name}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              className=\"bg-bolt-elements-background-depth-1 border border-bolt-elements-borderColor rounded-lg p-4\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className={classNames(\n                    getStatusIcon(tool.status),\n                    'w-5 h-5',\n                    getStatusColor(tool.status),\n                    tool.status === 'checking' && 'animate-spin'\n                  )} />\n                  \n                  <div>\n                    <h4 className=\"font-medium text-bolt-elements-textPrimary\">\n                      {tool.name}\n                    </h4>\n                    <div className=\"flex items-center gap-4 text-sm text-bolt-elements-textSecondary\">\n                      <span>Status: {tool.status}</span>\n                      {tool.lastChecked && (\n                        <span>Last checked: {new Date(tool.lastChecked).toLocaleTimeString()}</span>\n                      )}\n                      {tool.responseTime && (\n                        <span>Response: {tool.responseTime}ms</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <IconButton\n                    icon=\"i-ph:arrow-counter-clockwise\"\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    title=\"Check this tool\"\n                    onClick={() => checkSingleTool(tool.name)}\n                    disabled={tool.status === 'checking'}\n                  />\n                </div>\n              </div>\n              \n              {tool.error && (\n                <div className=\"mt-3 p-3 bg-red-500/10 border border-red-500/20 rounded text-sm\">\n                  <div className=\"font-medium text-red-500 mb-1\">Error Details:</div>\n                  <div className=\"text-bolt-elements-textSecondary\">{tool.error}</div>\n                </div>\n              )}\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {Object.keys(toolsHealth).length === 0 && (\n        <div className=\"text-center py-12\">\n          <div className=\"text-6xl mb-4\">🔧</div>\n          <h3 className=\"text-lg font-medium text-bolt-elements-textPrimary mb-2\">\n            No enabled tools to monitor\n          </h3>\n          <p className=\"text-bolt-elements-textSecondary\">\n            Enable some community tools to start monitoring their health.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n});\n\nToolsHealthMonitor.displayName = 'ToolsHealthMonitor';